{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2Oos-lpfEQXI"
   },
   "source": [
    "# Introduction\n",
    "\n",
    "For nearly five years now, equadratures <cite data-footcite=\"seshadri2017effective\"> </cite>, a pure python code, has been made openly available to the computational methods community. Over the last two years alone, it has been downloaded well over 40,000 times, and is being used across industry, government, and academia. Today, equadratures is a model development platform facilitating explainable and robust models that do not require large cloud infrastructure to train, unlike many deep learning frameworks. Models built in equadratures can be used for a wide range of tasks spanning uncertainty quantification, sensitivity analysis, numerical integration, optimisation, clustering, parameter-space exploration, dimension reduction, surrogate modelling, and even digital twinning.\n",
    "\n",
    "When originally developed five years ago, equadratures (known then as Effective Quadratures) was purpose-built for facilitating non-intrusive uncertainty quantification through polynomial chaos expansions <cite data-footcite=\"xiu2002wiener, constantine2012sparse, seshadri2017effectively\"> </cite>. The unique selling point of the code was an adoption of least squares and compressed sensing-based approaches for estimating polynomial coefficients, rather than opting for more conventional tensor and sparse grid strategies. This permitted greater anisotropy in the selection of basis functions used in the polynomial expansions, as well as a reduction in the number of samples required with rising problem dimensionality. The overall workflow can best be summarised in the steps below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "          User prescribes input marginal distributions for each uncertainty.\n",
    "\n",
    "                                         │\n",
    "                                         ▼\n",
    "\n",
    "Least squares or compressed sensing framework is used to generate a design of experiment.\n",
    "\n",
    "                                         │\n",
    "                                         ▼\n",
    "\n",
    "                   Model is evaluated at the design of experiment.\n",
    "\n",
    "                                         │\n",
    "                                         ▼\n",
    "\n",
    "                        Polynomial coefficients are computed.\n",
    "\n",
    "                                         │\n",
    "                                         ▼\n",
    "\n",
    "     Moments and sensitivities (Sobol' indices) are determined from the coefficients.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shift towards least squares and compressed sensing is well captured in literature <cite data-footcite=\"cohen2013stability,luthen2021sparse\"></cite> as are the different strategies for arriving at well conditioned matrices and sampling distributions <cite data-footcite=\"guo2020constructing, hadigol2018least, peng2014weighted\"></cite> . There is a clear trend to opt  for random sampling techniques paired with well-worn algorithms for identifying well-conditioned submatrices, e.g., QR with column pivoting and SVD-based subset selection <cite data-footcite=\"bjorck2015numerical\"></cite> , among other convex optimisation rooted techniques (see <cite data-footcite=\"seshadri2019quadrature\"></cite> for a comparison). \n",
    "\n",
    "Over the past few years, equadratures has grown in capability, ingesting and synthesising key advances in literature to accelerate application impact. One of the most fruitful advances have been in parameter-space dimension reduction, where the central idea is to ascertain whether a function admits a dimension reducing subspace---i.e., a few linear combination of all the variables which may be used for function approximation. While the idea is itself not unprecedented <cite data-footcite=\"samarov1993exploring\"></cite>, it has experienced a resurgence owing to a prodigious number of publications under the handles of active subspaces <cite data-footcite=\"constantine2015active\"></cite>, sufficient dimension reduction <cite data-footcite=\"cook2005sufficient\"></cite> and ridge functions <cite data-footcite=\"pinkus2015ridge\"></cite> (to name a few). These works have been championed by researchers spanning both academia and industry---with impactful use cases <cite data-footcite=\"seshadri2018turbomachinery, scillitoe2020design, constantine2017global, constantine2015exploiting\"></cite> that likely serve as a precursor to further advances within the areas of function approximation. A practical outlook on the success of data-driven dimension reduction in computational science may be enforced by the notion that we trust our models within a relatively small parameter space and conduct our parameter studies accordingly. Thus, function values around a notional centroid may be well-approximated via linear projections of neighboring parameter values. \n",
    "\n",
    "Beyond dimension reduction, ancillary progress on robust methods for dealing with correlations in the inputs, i.e., identifying independent polynomial basis on correlated spaces <cite data-footcite=\"jakeman2019polynomial\"></cite> has been important for driving forth the uptake of polynomial-based methods and thus equadratures. This builds upon prior work with Nataf and Rosenblatt transformations <cite data-footcite=\"novak2018polynomial\"></cite>. These advances have permitted the construction of stable *global* polynomials across both high order and high dimensional problems. This naturally leads one to consider leveraging polynomials across a wider range of challenges including optimisation, multi-fidelity modelling, spatial-field modelling and dimension reduction.  \n",
    "\n",
    "It is important to remark that *global* smoothness and continuity are certainly not guaranteed for all problems. Thus, strategies to fit multiple polynomials over a domain are extremely useful, especially when working with problems that are characterised by a relatively large parameter space. This may take the form of trust region methods <cite data-footcite=\"nocedal2006trust\"></cite> or tree-based methods <cite data-footcite=\"breiman2017classification\"></cite>, where polynomials need to be defined over a subdomain in a recursive manner---based on certain approximation error criterion. Within equadratures these ideas have found utility in polynomial regression tree models and trust-region optimisation methods. In fact for the latter, if one further assumes that a subspace-based dimension reduction representation exists, then from the perspective of optimiser, as the trust region migrates through a larger parameter space, finding such projections iteratively may be incredibly valuable, both from the perspectives of convergence rate and optimality (see <cite data-footcite=\"gross2021optimization\"></cite>)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### References\n",
    ".. footbibliography::"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "colab": {
   "name": "1_Introduction.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
