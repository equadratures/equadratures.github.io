{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2Oos-lpfEQXI"
   },
   "source": [
    "# Polynomials\n",
    "\n",
    "Assume that $f$ is sufficiently smooth and continuous such that it can be approximated by a global polynomial $p$\n",
    "\\begin{align}\n",
    "\\begin{split}\n",
    "f \\left( \\boldsymbol{x} \\right) & \\approx p \\left( \\boldsymbol{x} \\right) \\\\\n",
    "&= \\sum_{j=1}^{N} \\alpha_{j} \\boldsymbol{\\phi}_{j}\\left( \\boldsymbol{x}\\right), \\\\\n",
    "&= \\boldsymbol{P} \\boldsymbol{\\alpha}\n",
    "\\end{split}\n",
    "\\label{equ:polyapprox}{\\tag{1}}\n",
    "\\end{align}\n",
    "\n",
    "defined as a weighted sum of $N$ known basis polynomials, where\n",
    "\n",
    "\\begin{align}\n",
    "\\boldsymbol{\\phi}_{j} \\left(\\boldsymbol{x}  \\right)&=\\prod_{k=1}^{d}\\phi^{(k)}_{j_{k}}\\left(x^{(k)}\\right), &  \\left(j_1, \\ldots, j_d \\right) \\in \\mathbb{N}_0^d,\n",
    "\\end{align}\n",
    "\n",
    "and where $\\left[\\boldsymbol{P} \\right]_{i,j}=\\boldsymbol{\\phi}_{j}\\left(\\boldsymbol{x}_{i}\\right)$ for some discretised value $\\boldsymbol{x}_{i} \\in \\mathcal{X}$. Note that the polynomials $\\boldsymbol{\\phi}_{j}$ defined in this way are mutually orthogonal in $L^2$ weighted by $\\boldsymbol{\\rho}$. More specifically, we can state that these composite univariate polynomials must satisfy\n",
    "\n",
    "\\begin{equation}\n",
    "\\int_{\\mathcal{X}^{k}}\\phi_{g}\\left(x^{(k)}\\right)\\phi_{h}\\left(x^{(i)}\\right)\\rho_{k}\\left(x^{(k)}\\right)dx^{(k)}=\\delta_{gh},\n",
    "\\end{equation}\n",
    "\n",
    "where $\\delta_{gh}$ is the Kronecker delta; subscripts $g$ and $h$ denote polynomial orders. The above expression crystallizes the choice of the orthogonal polynomial family based on the choice of the weight function $\\rho_{k} \\left( x^{(k)} \\right)$. For instance if $\\rho_{k} \\left( x^{(k)} \\right)$ were the uniform distribution with $\\mathcal{X}^{(k)} \\in [a, b]$ then $\\left\\{  \\phi_{j} \\left( x^{(k)} \\right) \\right\\}_{j=0}^{\\infty}$ would correspond to Legendre polynomials; for Gaussian weights one would use Hermite polynomials, and so on. Details about these weight-polynomial pairs can be found in <cite data-footcite=\"xiu2002wiener\"></cite>. Succinctly stated, choosing the correct weight-polynomial pairs will lead to an exponential convergence in $\\eqref{equ:polyapprox}$ thereby reducing the number of terms $N$ required. As a consequence, this will also reduce the number of model evaluations needed to estimate the unknown coefficients $\\left(\\alpha_1, \\ldots, \\alpha_{N} \\right)$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before moving on to the computation of the coefficients, a few words on the computation of the individual univariate orthogonal polynomials $\\phi_{j}\\left(x^{(k)} \\right)$ are in order. Orthogonal polynomials of any order may be given by a three-term recurrence relation\n",
    "\n",
    "\n",
    "\n",
    "\\begin{equation}\n",
    "\\beta_{j+1} \\phi_{j+1}\\left(x^{(k)} \\right) = \\left(x^{(k)} - \\alpha_{j} \\right) \\phi_{j}\\left(x^{(k)} \\right) - \\beta_{j}\\phi_{j-1}\\left(x^{(k)} \\right), \\; \\; \\; \\; \\textrm{for} \\; \\; \\; j=0, 1, 2, 3, \\ldots\n",
    "\\end{equation}\n",
    "\n",
    "where $\\left(\\alpha_{j}, \\beta_{j} \\right)$ are a set of recurrence coefficients explicitly known, dependent upon $\\rho_{k}\\left( x^{(k)} \\right)$ <cite data-footcite=\"gautschi1982generating\"></cite>. A four-term recurrence formula can also be derived for the derivatives of orthogonal polynomials."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### References\n",
    ".. footbibliography::"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "colab": {
   "name": "1_Introduction.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
